// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.3
// source: heart.proto

package heart

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	HeartServer_HeartBeat_FullMethodName = "/heart.HeartServer/HeartBeat"
)

// HeartServerClient is the client API for HeartServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HeartServerClient interface {
	HeartBeat(ctx context.Context, opts ...grpc.CallOption) (HeartServer_HeartBeatClient, error)
}

type heartServerClient struct {
	cc grpc.ClientConnInterface
}

func NewHeartServerClient(cc grpc.ClientConnInterface) HeartServerClient {
	return &heartServerClient{cc}
}

func (c *heartServerClient) HeartBeat(ctx context.Context, opts ...grpc.CallOption) (HeartServer_HeartBeatClient, error) {
	stream, err := c.cc.NewStream(ctx, &HeartServer_ServiceDesc.Streams[0], HeartServer_HeartBeat_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &heartServerHeartBeatClient{stream}
	return x, nil
}

type HeartServer_HeartBeatClient interface {
	Send(*Heart) error
	CloseAndRecv() (*Result, error)
	grpc.ClientStream
}

type heartServerHeartBeatClient struct {
	grpc.ClientStream
}

func (x *heartServerHeartBeatClient) Send(m *Heart) error {
	return x.ClientStream.SendMsg(m)
}

func (x *heartServerHeartBeatClient) CloseAndRecv() (*Result, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Result)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HeartServerServer is the server API for HeartServer service.
// All implementations must embed UnimplementedHeartServerServer
// for forward compatibility
type HeartServerServer interface {
	HeartBeat(HeartServer_HeartBeatServer) error
	mustEmbedUnimplementedHeartServerServer()
}

// UnimplementedHeartServerServer must be embedded to have forward compatible implementations.
type UnimplementedHeartServerServer struct {
}

func (UnimplementedHeartServerServer) HeartBeat(HeartServer_HeartBeatServer) error {
	return status.Errorf(codes.Unimplemented, "method HeartBeat not implemented")
}
func (UnimplementedHeartServerServer) mustEmbedUnimplementedHeartServerServer() {}

// UnsafeHeartServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HeartServerServer will
// result in compilation errors.
type UnsafeHeartServerServer interface {
	mustEmbedUnimplementedHeartServerServer()
}

func RegisterHeartServerServer(s grpc.ServiceRegistrar, srv HeartServerServer) {
	s.RegisterService(&HeartServer_ServiceDesc, srv)
}

func _HeartServer_HeartBeat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HeartServerServer).HeartBeat(&heartServerHeartBeatServer{stream})
}

type HeartServer_HeartBeatServer interface {
	SendAndClose(*Result) error
	Recv() (*Heart, error)
	grpc.ServerStream
}

type heartServerHeartBeatServer struct {
	grpc.ServerStream
}

func (x *heartServerHeartBeatServer) SendAndClose(m *Result) error {
	return x.ServerStream.SendMsg(m)
}

func (x *heartServerHeartBeatServer) Recv() (*Heart, error) {
	m := new(Heart)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HeartServer_ServiceDesc is the grpc.ServiceDesc for HeartServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HeartServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "heart.HeartServer",
	HandlerType: (*HeartServerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "HeartBeat",
			Handler:       _HeartServer_HeartBeat_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "heart.proto",
}
